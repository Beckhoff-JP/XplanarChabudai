<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_mqtt_publish" Id="{1aff89c1-b24e-4329-a407-cdf41e6202bf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_mqtt_publish IMPLEMENTS  ITF_CoeSdoEventHandler
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// published message
	fbMqttClient : FB_IotMqttClient;
	fbMessageQueue : FB_IotMqttMessageQueue;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	hrErrorOccurred : HRESULT; // contains the latest occurred error
	
	fbSerializer :FB_Serializer;
	
	sTopicPub : STRING(255) := 'devices/unit230/messages/events/';
	
	// for making publish event
	publish_cycle_timer :TON;
	datetime_string: STRING(39);
	
	publish_command: BOOL;
	_error_id :UDINT;
	
	_fbDatabaseRecorder : REFERENCE TO BufferedRecord;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Connect MQTT broker and publish

IF bSetParameter THEN
	bSetParameter := FALSE;
	fbMqttClient.sHostName := 'IndustrialOPNFair2024-IoTHub.azure-devices.net';
	fbMqttClient.nHostPort := 8883;
	fbMqttClient.stTLS.sCA := 'c:\TwinCAT\3.1\Config\Certificates\BaltimoreCyberTrust.cer'; // CA certificate 
	fbMqttClient.sClientId := 'unit230';
	fbMqttClient.stTLS.sAzureSas := 'HostName=IndustrialOPNFair2024-IoTHub.azure-devices.net;DeviceId=unit230;SharedAccessSignature=SharedAccessSignature sr=IndustrialOPNFair2024-IoTHub.azure-devices.net%2Fdevices%2Funit230&sig=aZHGqBLbPbZ0nCj3%2BrwgAJAAhzI2BvVoTXPMA%2BaobPA%3D&se=1734308970'; // Device SAS Token
	fbMqttClient.stTLS.bNoServerCertCheck:=TRUE;
	(*
	//fbMqttClient.stTLS.sCA := 'c:\TwinCAT\3.1\Config\Certificates\BaltimoreCyberTrust.crt'; // CA certificate 
	//fbMqttClient.stTLS.sAzureSas := 'HostName=IndustrialOPNFair2024-IoTHub.azure-devices.net;DeviceId=unit230;SharedAccessSignature=SharedAccessSignature sr=IndustrialOPNFair2024-IoTHub.azure-devices.net%2Fdevices%2Funit230&sig=GxT9x70t1Q1per9XXu4Az%2FJhK1jBZt14KJ%2B7LG4NB%2Fw%3D&se=1712921181'; // Device SAS Token
	fbMqttClient.sClientId := 'unit230';
	fbMqttClient.sHostName := '192.168.1.20';
	fbMqttClient.nHostPort := 1883;
	*)
	fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(bConnect);
IF fbMqttClient.bError THEN
  // add your error logging here
  hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF


publish_cycle_timer(IN := NOT publish_command, PT := T#5S);

IF publish_cycle_timer.Q THEN
	publish_command := TRUE;
END_IF
]]></ST>
    </Implementation>
    <Property Name="fbDatabaseRecorder" Id="{e364b29c-f96b-47c5-812d-d9de088c6ae6}">
      <Declaration><![CDATA[PROPERTY fbDatabaseRecorder : REFERENCE TO BufferedRecord]]></Declaration>
      <Set Name="Set" Id="{91702df8-44ce-4302-9d58-fb3c3b778913}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fbDatabaseRecorder REF= fbDatabaseRecorder;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="nErrID" Id="{23e231bd-c44f-4e02-8a8b-e9645fc01229}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY nErrID : UDINT
]]></Declaration>
      <Get Name="Get" Id="{91a8df65-1b9a-4afb-bfdf-be827636d678}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nErrID := _error_id;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="sdo_data_received" Id="{598e3abe-0bfd-47c5-95e4-1fd355927e50}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD sdo_data_received : BOOL
VAR_INPUT
	command	: REFERENCE TO bajp_diagtool.CoeSdoCommand;
END_VAR
VAR
	diag_data_body: POINTER TO sdo_xplanar_aps_diag;
	temp: UDINT;
	i: UINT;
END_VAR
VAR_INST
	tile_number : UINT;
	sPayloadPub : STRING(255);
	pub_complete : ARRAY [1..2] OF BOOL;
	// Record data buffer
    fb_database_aps_diag    :ST_database_aps_diag;    // 書込みデータ設定用
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[diag_data_body := command.pDstBuf;
CASE command.nSlaveAddr OF
	1001:
		tile_number := 1;
	1003:
		tile_number := 2;
END_CASE

//For TF6420 Database
IF __ISVALIDREF(_fbDatabaseRecorder) THEN
	fb_database_aps_diag.tile_number := TO_STRING(tile_number);
	fb_database_aps_diag.acceleration_y := diag_data_body^.acceleration_y;
	fb_database_aps_diag.acceleration_y := diag_data_body^.acceleration_y;
	fb_database_aps_diag.acceleration_z := diag_data_body^.acceleration_z;
	fb_database_aps_diag.auxiliary_voltage := diag_data_body^.auxiliary_voltage;
	fb_database_aps_diag.dc_link_voltage := diag_data_body^.dc_link_voltage;
	fb_database_aps_diag.fan_duty_cycle := diag_data_body^.fan_duty_cycle;
	fb_database_aps_diag.fan_rpm := diag_data_body^.fan_rpm;
	fb_database_aps_diag.fb_fw_rev := diag_data_body^.fb_fw_rev;
	fb_database_aps_diag.power_supply_current := diag_data_body^.power_supply_current;
	fb_database_aps_diag.supply_voltage_us := diag_data_body^.supply_voltage_us;
	fb_database_aps_diag.temperature_center := diag_data_body^.temperature_center;
	fb_database_aps_diag.temperature_east := diag_data_body^.temperature_east;
	fb_database_aps_diag.temperature_north := diag_data_body^.temperature_north;
	fb_database_aps_diag.temperature_power := diag_data_body^.temperature_power;
	fb_database_aps_diag.temperature_south := diag_data_body^.temperature_south;
	fb_database_aps_diag.temperature_west := diag_data_body^.temperature_west;
	fb_database_aps_diag.time_to_shutdown := diag_data_body^.time_to_shutdown;
	_fbDatabaseRecorder.write(ADR(fb_database_aps_diag));	
END_IF


// For TF6701 MQTT
IF publish_command AND fbMqttClient.bConnected THEN
	datetime_string := SYSTEMTIME_TO_ISO8601(
		systemTime := command.datetime,
		nBias := 0,
		bUTC := TRUE,
		nPrecision := 3
	);
	CASE tile_number OF
		1:
			temp := diag_data_body^.temperature_west;
		2:
			temp := diag_data_body^.temperature_east;
	END_CASE
	sPayloadPub := fbSerializer.serialize(
	  datetime := datetime_string,
	  device_name := CONCAT('xplanar_tile_', UINT_TO_STRING(tile_number)),
	  temp := temp,
	  fan_rpm := diag_data_body^.fan_rpm,
	  current := diag_data_body^.power_supply_current
	);
	IF fbMqttClient.Publish(	sTopic:= sTopicPub, 
				pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), 
				eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE ) THEN
		_error_id := 0;
		sdo_data_received := TRUE;
	END_IF
    IF fbMqttClient.bError THEN
      // add your error logging here
    	_error_id := TO_UDINT(fbMqttClient.hrErrorCode);
	  	sdo_data_received := TRUE;
	ELSE
		pub_complete[tile_number] := TRUE;
    END_IF
	publish_command := FALSE;
	FOR i := 1 TO 2 DO
		IF NOT pub_complete[i] THEN
			publish_command := TRUE;
		END_IF
	END_FOR
ELSE
	FOR i := 1 TO 2 DO
		pub_complete[i] := FALSE;
	END_FOR
	sdo_data_received := TRUE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_mqtt_publish">
      <LineId Id="33" Count="4" />
      <LineId Id="108" Count="4" />
      <LineId Id="105" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="77" Count="2" />
      <LineId Id="107" Count="0" />
      <LineId Id="40" Count="10" />
      <LineId Id="139" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_mqtt_publish.fbDatabaseRecorder.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_mqtt_publish.nErrID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_mqtt_publish.sdo_data_received">
      <LineId Id="303" Count="8" />
      <LineId Id="382" Count="0" />
      <LineId Id="385" Count="17" />
      <LineId Id="404" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="333" Count="48" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
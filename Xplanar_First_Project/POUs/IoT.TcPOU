<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="IoT" Id="{a18040ea-08a5-44c3-a275-8f9a987457b9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM IoT
VAR CONSTANT
	EC_MASTER_NETID : T_AmsNetId := '192.168.80.1.4.1';
END_VAR
VAR
	
	//TileInfo					: ARRAY [0..1] OF TileInfoType;

	sdo_controller : FB_CoeSdoAccess(sNetId := EC_MASTER_NETID);
	planar_tiles_diag_data : ARRAY[1..2] OF sdo_xplanar_aps_diag;
	sessions: ARRAY [1..2] OF CoeSdoCommand;
	read_cycle_timer: TON;
	fbMqttPublish : FB_mqtt_publish;
	
	slave_state : FB_EcGetSlaveState;
	state : ST_EcSlaveStateBits;
	
	// Diag data dabase recorder
	database_aps_diag_buffer  :ARRAY [0..1999] OF ST_database_aps_diag; // バッファ配列の定義
    fb_aps_diag_db_recorder  :BufferedRecord(
        GVL.fbInfluxDBRecorder, 
        ADR(database_aps_diag_buffer)
    );		// record controller

	// XPlanar dynamics data recorder
	database_mover_dynamics_buffer  :ARRAY [0..9999] OF ST_mover_dynamics; // バッファ配列の定義
    fb_mover_dynamics_recorder  :BufferedRecord(
        GVL.fbInfluxDBRecorder, 
        ADR(database_mover_dynamics_buffer)
    );		// record controller

	// ADS Router information tracing
	database_ads_router_info_buffer : ARRAY [0..499] OF ST_RouterStatusInfo;
	fb_ads_router_status_recorder : BufferedRecord(
		GVL.fbInfluxDBRecorder, 
		ADR(database_ads_router_info_buffer)
	);
	
	record_data_set_positions : ST_mover_dynamics := (index := 'Mover 1 Setting position');
	record_data_act_positions : ST_mover_dynamics := (index := 'Mover 1 Actual position');
	
	db_initialize :BOOL;
	structure_size: INT;
	SetDynamics : CDT_MCTOPLC_PLANAR_MOVER_SET;
	ActDynamics : CDT_MCTOPLC_PLANAR_MOVER_ACT;
	
	ads_router_status_record_interval_timer : TON := (PT:=T#1S);

	fb_get_router_status : FB_GetRouterStatusInfo;
	fb_get_router_status_report : BOOL;
	router_status_record_data : ST_RouterStatusInfo;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Database Writing actions
GVL.fbInfluxDBRecorder();

//Xplanar各タイルの温度情報の取得
//FB_ECCoeSdoReadを使ったライブラリTwinCATDiagnosisToolsにてCoEアクセスするので、こちらはコメントアウト
(*
IF fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.Update() THEN
	TileInfo[0].Center 	:= fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.TemperatureCenter;
	TileInfo[0].East 	:= fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.TemperatureEast;
	TileInfo[0].North 	:= fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.TemperatureNorth;
	TileInfo[0].South 	:= fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.TemperatureSouth;
	TileInfo[0].West 	:= fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.TemperatureWest;
	TileInfo[0].FanRPM	:= fbENviroment.XpuTcIo(1).TileCoE(1,1).DiagData.FanRpm;
	
END_IF;

IF fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.Update() THEN
	TileInfo[1].Center 	:= fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.TemperatureCenter;
	TileInfo[1].East 	:= fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.TemperatureEast;
	TileInfo[1].North 	:= fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.TemperatureNorth;
	TileInfo[1].South 	:= fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.TemperatureSouth;
	TileInfo[1].West 	:= fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.TemperatureWest;
	TileInfo[1].FanRPM	:= fbENviroment.XpuTcIo(1).TileCoE(1,2).DiagData.FanRpm;
	
END_IF;
*)

(* SDO XPlanar APS diannosys data*)

slave_state(
	sNetId:='192.168.80.1.4.1',
	nSlaveAddr := 1001,
	bExecute := NOT slave_state.bBusy
);

IF NOT slave_state.bBusy THEN
	state := F_ConvSlaveStateToBits(slave_state.state);	
END_IF

// Get diganosis data from SDO
sdo_controller();
fbMqttPublish();

// Get diagnostics data every 0.5s
read_cycle_timer(IN := NOT read_cycle_timer.Q, PT := T#500MS);

IF read_cycle_timer.Q THEN
	sdo_controller.query(
					nSlaveAddr := 1001,
					bCompleteAccess := TRUE, 
					nIndex := 16#FA00, 
					nSubIndex := 0,
					pDstBuf := ADR(planar_tiles_diag_data[1]),
					cbBufLen := SIZEOF(planar_tiles_diag_data[1]),
					event_handler := fbMqttPublish
					);
	sdo_controller.query(
					nSlaveAddr := 1003,
					bCompleteAccess := TRUE, 
					nIndex := 16#FA00, 
					nSubIndex := 0,
					pDstBuf := ADR(planar_tiles_diag_data[2]),
					cbBufLen := SIZEOF(planar_tiles_diag_data[2]),
					event_handler := fbMqttPublish
					);
END_IF

// Database 
IF NOT db_initialize THEN
	fb_aps_diag_db_recorder.set_buffer_info(struct_size := SIZEOF(database_aps_diag_buffer[0]),
											buffer_size := SIZEOF(database_aps_diag_buffer),
											structure_name := 'ST_database_aps_diag');
	fb_aps_diag_db_recorder.SQL_parameters.table_name := 'xplanar_aps_diag';

	fb_mover_dynamics_recorder.set_buffer_info(struct_size := SIZEOF(database_mover_dynamics_buffer[0]),
											buffer_size := SIZEOF(database_mover_dynamics_buffer),
											structure_name := 'ST_mover_dynamics');
	fb_mover_dynamics_recorder.SQL_parameters.table_name := 'mover_dynamics';

	fb_ads_router_status_recorder.set_buffer_info(struct_size := SIZEOF(database_ads_router_info_buffer[0]),
											buffer_size := SIZEOF(database_ads_router_info_buffer),
											structure_name := 'ST_RouterStatusInfo');
	fb_ads_router_status_recorder.SQL_parameters.table_name := 'ADS_router_status';	
	fb_ads_router_status_recorder.max_chunk_size := 1;
	
	db_initialize := TRUE;
	fbMqttPublish.fbDatabaseRecorder REF= fb_aps_diag_db_recorder;
END_IF


ads_router_status_record_interval_timer(IN := NOT ads_router_status_record_interval_timer.Q);
fb_get_router_status_report := fb_get_router_status.bBusy;
fb_get_router_status(
	bExecute := ads_router_status_record_interval_timer.Q
);

IF fb_get_router_status_report AND NOT fb_get_router_status.bBusy THEN
	MEMCPY(ADR(router_status_record_data), ADR(fb_get_router_status.info), SIZEOF(fb_get_router_status.info));
	IF GVL.tf6420_enable THEN
		fb_ads_router_status_recorder.write(ADR(router_status_record_data));
	END_IF
END_IF

SetDynamics := GVL.planar_movers[1].MCTOPLC.SET;
ActDynamics := GVL.planar_movers[1].MCTOPLC.ACT;

record_data_set_positions.a := SetDynamics.SetPos.a;
record_data_set_positions.b := SetDynamics.SetPos.b;
record_data_set_positions.c := SetDynamics.SetPos.c;
record_data_set_positions.x := SetDynamics.SetPos.x;
record_data_set_positions.y := SetDynamics.SetPos.y;
record_data_set_positions.z := SetDynamics.SetPos.z;

IF GVL.tf6420_enable THEN
	fb_mover_dynamics_recorder.write(ADR(record_data_set_positions));
END_IF

record_data_act_positions.a := ActDynamics.ActPos.a;
record_data_act_positions.b := ActDynamics.ActPos.b;
record_data_act_positions.c := ActDynamics.ActPos.c;
record_data_act_positions.x := ActDynamics.ActPos.x;
record_data_act_positions.y := ActDynamics.ActPos.y;
record_data_act_positions.z := ActDynamics.ActPos.z;

IF GVL.tf6420_enable THEN
	fb_mover_dynamics_recorder.write(ADR(record_data_act_positions));
END_IF]]></ST>
    </Implementation>
    <LineIds Name="IoT">
      <LineId Id="487" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="415" Count="22" />
      <LineId Id="559" Count="1" />
      <LineId Id="455" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="458" Count="1" />
      <LineId Id="457" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="230" Count="5" />
      <LineId Id="319" Count="5" />
      <LineId Id="361" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="326" Count="6" />
      <LineId Id="365" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="529" Count="1" />
      <LineId Id="522" Count="0" />
      <LineId Id="576" Count="2" />
      <LineId Id="573" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="668" Count="1" />
      <LineId Id="666" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="701" Count="1" />
      <LineId Id="521" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="671" Count="1" />
      <LineId Id="691" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="679" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="586" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="594" Count="4" />
      <LineId Id="758" Count="0" />
      <LineId Id="612" Count="1" />
      <LineId Id="599" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="606" Count="4" />
      <LineId Id="760" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="593" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
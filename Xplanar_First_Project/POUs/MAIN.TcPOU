<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{09544d0d-3edc-4a61-aaa2-1eeba1575761}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bStart 						: BOOL;
	bEnable 					: BOOL;
	bDisable 					: BOOL;
	bReset 						: BOOL;
	bStop						: BOOL;
	nCase 						: UINT;
	nDemoSequenceState			: UINT;
	
	cmdFB						: MC_PlanarFeedback;
	stMoverState				: MC_PLANAR_STATE;
	
	// Homing
	fbHomeATasks				: FB_TaskMoveA_tilt(fbMover := GVL.planar_movers[1]);
	fbHomeBTasks				: FB_TaskMoveB_tilt(fbMover := GVL.planar_movers[1]);
	fbHomeZTasks				: FB_TaskMoveZ(fbMover := GVL.planar_movers[1]);
	fbHomeCTasks				: FB_TaskMoveC(fbMover := GVL.planar_movers[1]);
	fbHomeToPositionTasks		: FB_TaskMoveToPosition(fbMover := GVL.planar_movers[1]);
	fb_home_sequence			: bajp_jobmgmt.FB_QueueJobContainer;
	fb_home_job					: bajp_jobmgmt.FB_Executor;
	
	// Demo Pattern
	fbMoveToPositionTasks		: ARRAY [1..9] OF FB_TaskMoveToPosition(fbMover := GVL.planar_movers[1]);
	fbMoveCTasks				: ARRAY [1..5] OF FB_TaskMoveC(fbMover := GVL.planar_movers[1]);
	fbMoveZTasks				: ARRAY [1..2] OF FB_TaskMoveZ(fbMover := GVL.planar_movers[1]);
	fbMoveATasks				: ARRAY [1..3] OF FB_TaskMoveA_tilt(fbMover := GVL.planar_movers[1]);
	fbMoveBTasks				: ARRAY [1..3] OF FB_TaskMoveB_tilt(fbMover := GVL.planar_movers[1]);
	fbMoveAB_ATasks				: ARRAY [1..3] OF FB_TaskMoveA_tilt(fbMover := GVL.planar_movers[1]);
	fbMoveAB_BTasks				: ARRAY [1..3] OF FB_TaskMoveB_tilt(fbMover := GVL.planar_movers[1]);
	fbMoveZTask_init			: FB_TaskMoveZ(fbMover := GVL.planar_movers[1]);
	
	fb_positioning_job			: bajp_jobmgmt.FB_BatchJobContainer;
	fb_rotation_job				: bajp_jobmgmt.FB_BatchJobContainer;
	fb_vertical_repeat_jobs		: bajp_jobmgmt.FB_BatchJobContainer;
	fb_tilt_A_repeat_jobs		: bajp_jobmgmt.FB_BatchJobContainer;
	fb_tilt_B_repeat_jobs		: bajp_jobmgmt.FB_BatchJobContainer;
	fb_tilt_AB_cycle_jobs		: bajp_jobmgmt.FB_BatchJobContainer;
	fb_demo_job					: bajp_jobmgmt.FB_BatchJobContainer;
	fb_manu_job					: bajp_jobmgmt.FB_QueueJobContainer;
	fbJob						: bajp_jobmgmt.FB_Executor;
	i: UINT;
	current_action : T_Maxstring;
	manual_command: iManualCommand;
	//ads_reporter : FB_ADSLOG_reporter;
	ads_reporter : FB_JobReporter;
	
	//試運転用パラメーター      
	(*          			
	Vel							: UDINT	:= 100;
	Acc							: UDINT	:= 1000;
	Dcc							: UDINT	:= 1000;
	Jerk						: UDINT	:= 5000;
	Ang_Vel						: UDINT	:= 100;
	Ang_Acc						: UDINT	:= 1000;
	Ang_Dcc						: UDINT	:= 1000;
	Ang_Jerk					: UDINT	:= 5000;
	*)             			
	 //デモ用パラメーター               			
	              			
	Vel							: UDINT	:= 400;
	Acc							: UDINT	:= 4000;
	Dcc							: UDINT	:= 4000;
	Jerk						: UDINT	:= 20000;
	Ang_Vel						: UDINT	:= 360;
	Ang_Acc						: UDINT	:= 3600;
	Ang_Dcc						: UDINT	:= 3600;
	Ang_Jerk					: UDINT	:= 36000;
	              			
	                			
	Height						: LREAL	:= 2.0;
	Cnt							: UINT;
	Z_High						: LREAL := 6.0;
	Z_Low						: LREAL := 2.0;
	A_Tilt						: LREAL := 0.0;
	B_Tilt						: LREAL := 0.0;
	Tilt						: LREAL := 2.5;
	Rotaion_Ang					: LREAL := 1.5;
	Estop						: BOOL;
	StopStep					: INT;
	fbDnyMoveEstop				: DynamicConstraint_PathXY;
	RotaionBit					: BOOL;
	Init_Angle					: BOOL;
	Init_Height_Tilt			: BOOL;
	
	Height_Tilt_Recover_Step	: INT;
	Init_Angle_Step				: INT;
	
	//  Utility Initial  -----------------------------------
	fbENviroment				: FB_TcIoXPlanarEnvironment;
	fbVisuXpalnar				: FB_XPlanarUtilityVisu;
	ipXpu						: I_TcIoXPlanarProcessingUnit;
	                			
	fbTcIoMover					: FB_TcIoXPlanarMover;
	ipXpm						: I_TcIoXPlanarMover;
	ipXpmsa						: I_XPlanarMoverScopeAdr;
	                			
	nStateInitXpu				: INT;
	bInit						: BOOL := FALSE;
	bInit_database				: BOOL := FALSE;

	LampTimer					: TON;
	ServoON						: BOOL;
	Error						: BOOL;
	Init_Start					: BOOL;

	
	Manupilate_Start: BOOL;
	nManupilationState: UINT;
	nJobConfigState: INT;
	Demo_Start: BOOL;
	manu_mode: BOOL;
	manual_command_event: BOOL;
	manual_command_event_mem: BOOL;
	manupilator_buttons: ARRAY [0..49] OF BOOL;
	manual_executor : REFERENCE TO FB_Executor;
	head : BOOL; tail: BOOL; order_num: UINT;
	Recipe_Display				: ARRAY [1..bajp_jobmgmt.ParamFuturesLib.MAX_TASK_NUM] OF T_MaxString;
	manual_start : BOOL;
	machine_mode: UINT;

	(* TF6420 Database server *)
    fbDtUtil : FB_DatetimeUtilities;

    // Record data buffer
    fb_database_job_event    :ST_database_job_event;    // 書込みデータ設定用
    database_job_event_buffer  :ARRAY [0..DbLibParam.DATA_BUFFER_SIZE - 1] OF ST_database_job_event; // バッファ配列の定義

    fb_job_event_db_recorder  :BufferedRecord(
        GVL.fbInfluxDBRecorder, 
        ADR(database_job_event_buffer)
    );		// record controller

	
END_VAR

VAR CONSTANT
	INIT_STEP	:	INT	 	:= 0;
	INIT_TILT 	: 	LREAL 	:= 0.0;
	INIT_HEIGHT :	LREAL 	:= 3.0;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//初期動作
IF NOT bInit THEN
		CASE nStateInitXpu OF
			0://Utilityの有効化
				IF fbENviroment.Init(TRUE) THEN
					fbENviroment.Init(FALSE);
					nStateInitXpu:=1;
				END_IF
			1://Utilityの実行を確認
				ipXpu:=fbENviroment.XpuTcIo(1);
				
				IF ipXpu<>0 THEN
					nStateInitXpu:=2;
				END_IF
				
			2://Job生成
				bInit := TRUE;
		END_CASE
	RETURN;
END_IF

IF NOT bInit_database THEN
	fb_job_event_db_recorder.min_chunk_size := 1;
	fb_job_event_db_recorder.max_chunk_size := 1;
	ads_reporter.fbDatabaseRecorder REF= fb_job_event_db_recorder;

	// Database column parameter initialization
	// 構造体名称の設定
	fb_job_event_db_recorder.set_buffer_info(
			struct_size := SIZEOF(database_job_event_buffer[0]), 
			buffer_size := SIZEOF(database_job_event_buffer), 
			structure_name := 'ST_database_job_event'); // Measurement name

	// SQLデータベースのテーブル名
	fb_job_event_db_recorder.SQL_parameters.table_name := 'job_event';

(*	
	// 列パラメータの登録
	fb_job_event_db_recorder.SQL_parameters.add_column(
		'datetime', 
		tf6420.E_ExpParameterType.Int64, 
		SIZEOF(fb_database_job_event.datetime)
	); // 列1
	fb_job_event_db_recorder.SQL_parameters.add_column(
		'old_state', 
		tf6420.E_ExpParameterType.STRING_,
		SIZEOF(fb_database_job_event.old_state)
	); // 列2
	fb_job_event_db_recorder.SQL_parameters.add_column(
		'new_status', 
		tf6420.E_ExpParameterType.STRING_,
		SIZEOF(fb_database_job_event.new_state)
	); // 列3
	fb_job_event_db_recorder.SQL_parameters.add_column(
		'task_name', 
		tf6420.E_ExpParameterType.STRING_, 
		SIZEOF(fb_database_job_event.task_name)
	); // 列4
	fb_job_event_db_recorder.SQL_parameters.add_column(
		'job_id', 
		tf6420.E_ExpParameterType.Int64, 
		SIZEOF(fb_database_job_event.job_id)
	); // 列5
	fb_job_event_db_recorder.SQL_parameters.add_column(
		'error_id', 
		tf6420.E_ExpParameterType.Int64, 
		SIZEOF(fb_database_job_event.erro_id)
	); // 列6
*)
	
	bInit_database := TRUE;
END_IF

GVL.planar_movers[1].Update();
cmdFB.Update();
ACT_Lamp_Ctrl();
stMoverState 					:= GVL.planar_movers[1].MCTOPLC.STD.State;

// SQL database
fb_home_job.job_event_reporter := ads_reporter;
fbjob.job_event_reporter := ads_reporter;

//サーボオン
IF bEnable THEN
	GVL.planar_movers[1].Enable(cmdFB);
	bEnable := FALSE;
END_IF

//サーボオフ
IF bDisable THEN
	GVL.planar_movers[1].Disable(cmdFB);
	nDemoSequenceState := 0;
	nManupilationState := 0;
	nCase := 0;
	IF fbjob.reset() THEN
		bDisable	:= FALSE;
	END_IF
END_IF

//サーボオン＋動作ステップが０番の時にデモ動作開始
IF stMoverState = MC_PLANAR_STATE.Enabled THEN
	IF Init_Start THEN
		// 原点復帰ボタンが押されたときの処理
		IF fb_manu_job.reset() THEN
			nCase 		:= 1;
			nManupilationState := 0;
			Init_Start	:= FALSE;
		END_IF
	END_IF
	CASE nManupilationState OF
		0: // 待機状態
			IF manu_mode AND nDemoSequenceState = 0 AND nCase = 5 THEN
				// Manual Modeボタンが押された時の処理
				nCase := 0;
				nManupilationState := 1;
			ELSE
				manu_mode := FALSE;
			END_IF
			// avoid
		1: // Clear jobs
			IF fbJob.reset() THEN
				IF manu_mode THEN
					MakeTasks();
					fb_manu_job.future_name := 'Manual';
					fbJob.future := fb_manu_job;
					nManupilationState := 2;
				ELSE
					nManupilationState := 0;
				END_IF
			END_IF
		2:// 非同期タスク発行
			manual_command_event := FALSE;
			FOR i := 0 TO 49 DO
				// HMIボタン入力
				IF manupilator_buttons[i] THEN
					manual_command_event := TRUE; // イベントフラグ
					manual_command.i_com := i; // コマンド番号をMenualCommand型のenumへ変換（UNION）
				END_IF
			END_FOR
		
			IF manual_command_event AND NOT manual_command_event_mem THEN
				// イベントフラグ立ち上がり条件の作成
				CASE manual_command.com OF
					// コマンド番号毎にタスクをキューに登録
					ManualCommand.move_pos_c1:
						fb_manu_job.add_future(fbMoveToPositionTasks[7]);
					ManualCommand.move_pos_c2:
						fb_manu_job.add_future(fbMoveToPositionTasks[1]);					
					ManualCommand.move_pos_c3:
						fb_manu_job.add_future(fbMoveToPositionTasks[8]);
					ManualCommand.move_pos_L1:
						fb_manu_job.add_future(fbMoveToPositionTasks[2]);	
					ManualCommand.move_pos_L2:
						fb_manu_job.add_future(fbMoveToPositionTasks[6]);
					ManualCommand.move_pos_L3:
						fb_manu_job.add_future(fbMoveToPositionTasks[3]);	
					ManualCommand.move_pos_r1:
						fb_manu_job.add_future(fbMoveToPositionTasks[4]);						
					ManualCommand.move_pos_r2:
						fb_manu_job.add_future(fbMoveToPositionTasks[9]);
					ManualCommand.move_pos_r3:
						fb_manu_job.add_future(fbMoveToPositionTasks[5]);						
					ManualCommand.move_roll_w:
						fb_manu_job.add_future(fbMoveCTasks[3]);
					ManualCommand.move_roll_n:
						fb_manu_job.add_future(fbMoveCTasks[1]);
					ManualCommand.move_roll_e:
						fb_manu_job.add_future(fbMoveCTasks[5]);
					ManualCommand.move_roll_s:
						fb_manu_job.add_future(fbMoveCTasks[4]);
					ManualCommand.move_tilt_up_front:
						fb_manu_job.add_future(fbMoveZTasks[1]);
						fb_manu_job.add_future(fbMoveATasks[1]);					
					ManualCommand.move_tilt_up_rear:
						fb_manu_job.add_future(fbMoveZTasks[1]);
						fb_manu_job.add_future(fbMoveATasks[2]);					
					ManualCommand.move_tilt_up_right:
						fb_manu_job.add_future(fbMoveZTasks[1]);
						fb_manu_job.add_future(fbMoveBTasks[1]);
					ManualCommand.move_tilt_up_left:
						fb_manu_job.add_future(fbMoveZTasks[1]);
						fb_manu_job.add_future(fbMoveBTasks[2]);					
					ManualCommand.move_tilt_horizontal:
						fb_manu_job.add_future(fbMoveATasks[3]);
						fb_manu_job.add_future(fbMoveBTasks[3]);
						fb_manu_job.add_future(fbMoveZTasks[2]);
					ManualCommand.move_up:
						fb_manu_job.add_future(fbMoveZTasks[1]);
					ManualCommand.move_down:					
						fb_manu_job.add_future(fbMoveZTasks[2]);
				END_CASE
			END_IF
			//IF NOT manual_command_event AND manual_command_event_mem THEN
			//	fb_manu_job.add_future(fbMoveATasks[3]);
			//	fb_manu_job.add_future(fbMoveBTasks[3]);
			//	fb_manu_job.add_future(fbMoveZTasks[2]);
			//END_IF
			manual_command_event_mem := manual_command_event;
			
			i := 1;
			head := FALSE;
			tail := FALSE;
			WHILE NOT tail DO
				manual_executor REF= fb_manu_job._future_generator(head, tail, order_num);
				IF manual_executor.future <> 0 AND order_num > 0 THEN
					Recipe_Display[i] := manual_executor.future.future_name;
					i := i + 1;
				END_IF
			END_WHILE
			WHILE i <= bajp_jobmgmt.ParamFuturesLib.MAX_TASK_NUM DO
				Recipe_Display[i] := '';
				i := i + 1;
			END_WHILE
			
			IF manual_start THEN
				nManupilationState := 3;
			END_IF
		3:
			//実行
			IF fbJob.current_state = bajp_jobmgmt.E_FutureExecutionState.wait_for_process AND fbJob.ready THEN
				fbJob.start();
			END_IF
			IF fbJob.execute() AND fbJob.nErrorID = 0 THEN
				fbJob.init();
			END_IF
			//停止動作
			IF bStop THEN
				fbJob.abort();	
			END_IF
			
			IF bReset THEN
				fbJob.start();
			END_IF
			current_action := fbJob.active_future_id;
			
			IF fbJob.current_state = bajp_jobmgmt.E_FutureExecutionState.finish THEN
				nManupilationState := 2;				
			END_IF
			
			IF NOT manu_mode THEN
				nManupilationState := 1;
			END_IF
	END_CASE
END_IF


//原点復帰
CASE nCase OF
	0:
		// avoid step
		
	1: // Clear jobs
		nDemoSequenceState := 0;
		// それまで行われいたfbJobとfb_home_jobをクリアする。（数サイクル要する）
		IF fbJob.reset() THEN
			IF fb_home_job.reset() THEN
				nCase := 2;
			END_IF			
		END_IF
	2: // 原点復帰ジョブの組み立て。1サイクルだけ実行しなければならない。
		MakeJob_Home();
		fb_home_sequence.future_name := 'Initiliaze';
		fb_home_sequence.add_future(fbHomeATasks);
		fb_home_sequence.add_future(fbHomeBTasks);
		fb_home_sequence.add_future(fbHomeZTasks);
		fb_home_sequence.add_future(fbHomeCTasks);
		fb_home_job.future := fb_home_sequence;
		IF fb_home_job.init() THEN
			nCase := 3;
		END_IF
	3: // execute initialization
		IF fb_home_job.current_state = bajp_jobmgmt.E_FutureExecutionState.wait_for_process AND fb_home_job.ready THEN
			fb_home_job.start();
		END_IF
		IF fb_home_job.execute() AND fb_home_job.nErrorID = 0 THEN
			nCase := 4;
		END_IF
		//停止動作
		IF bStop THEN
			fb_home_job.abort();	
		END_IF
		
		IF bReset THEN
			fb_home_job.start();
		END_IF
		current_action := fb_home_job.active_future_id;
	4: // Job creating.
		// Container クラスのreset()メソッドで子要素もリセットできるので、一括リセットするため、いったん全てのコンテナツリーをfb_demo_jobに登録する
		fb_demo_job.add_future(fb_positioning_job);
		fb_demo_job.add_future(fb_rotation_job);
		fb_demo_job.add_future(fb_vertical_repeat_jobs);
		fb_demo_job.add_future(fb_tilt_A_repeat_jobs);
		fb_demo_job.add_future(fb_tilt_B_repeat_jobs);
		fb_demo_job.add_future(fb_tilt_AB_cycle_jobs);
		fb_demo_job.add_future(fbMoveZTask_init);
		IF fb_demo_job.reset() THEN
			// リセットを実行し、完了後、再度ジョブをコンテナに登録する
			// リセットによってジョブ、タスク間の関係さえも切れてしまう。
			// よって、2度手間だがリセットのためにジョブモデル構築し、もう一度ジョブモデルを構築しなおす必要がある。
			// どの状態で終了したかわからない原点復帰ではこの処理が必要。
			MakeJob_DemoPattern();
			fb_demo_job.future_name := 'Demo Action';
			fb_demo_job.add_future(fb_positioning_job);
			fb_demo_job.add_future(fb_rotation_job);
			fb_demo_job.add_future(fb_vertical_repeat_jobs);
			fb_demo_job.add_future(fb_tilt_A_repeat_jobs);
			fb_demo_job.add_future(fb_tilt_B_repeat_jobs);
			fb_demo_job.add_future(fb_tilt_AB_cycle_jobs);
			fb_demo_job.add_future(fbMoveZTask_init);
			nCase := 5;
		END_IF
	5: // Ready to start
		IF stMoverState = MC_PLANAR_STATE.Disabled THEN
			nCase := 0;
			nDemoSequenceState := 0;
		END_IF
END_CASE


//デモ動作開始
IF Demo_Start THEN
	IF nCase = 5 AND nDemoSequenceState = 0 THEN
		nDemoSequenceState 		:= 1;
	END_IF
	Demo_Start	:= FALSE;	
END_IF


// デモ動作
CASE nDemoSequenceState OF
	0:
		// avoid
	1:
		fbJob.future := fb_demo_job;
		MakeTasks();
		// 初期化
		IF fbJob.init() THEN
			nDemoSequenceState := 2;
		END_IF
	2:
		//デモモード実行
		IF fbJob.current_state = bajp_jobmgmt.E_FutureExecutionState.wait_for_process AND fbJob.ready THEN
			fbJob.start();
		END_IF
		IF fbJob.execute() AND fbJob.nErrorID = 0 THEN
			nDemoSequenceState := 1;
		END_IF
		//停止動作
		IF bStop THEN
			fbJob.abort();	
		END_IF
		
		IF bReset THEN
			fbJob.start();
		END_IF
		current_action := fbJob.active_future_id;
END_CASE


IF nDemoSequenceState > 0 THEN
	machine_mode := 6;
ELSIF nManupilationState > 0 THEN
	machine_mode := 7;
ELSIF nCase <= 5 THEN
	machine_mode := nCase;	
END_IF


IF bStop THEN
	bStop		:= FALSE;
END_IF


//動作とエラーリセット
IF bReset THEN
	GVL.planar_movers[1].Reset(cmdFB);
	bReset		:= FALSE;
END_IF

IoT();]]></ST>
    </Implementation>
    <Action Name="ACT_Lamp_Ctrl" Id="{f67b75e7-2e3d-4471-91f9-9d6b1ed7fc89}">
      <Implementation>
        <ST><![CDATA[Error := FALSE;

IF stMoverState = MC_PLANAR_STATE.Disabled THEN
	LampTimer.IN := NOT LampTimer.Q;
	LampTimer.PT := T#750MS;
	LampTimer();
	
	IF LampTimer.Q THEN
		ServoON := NOT ServoON;
		
	END_IF
ELSIF stMoverState = MC_PLANAR_STATE.Enabled THEN	
	ServoON := TRUE;

	
ELSIF stMoverState = MC_PLANAR_STATE.Error THEN	
	Error := TRUE;

END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="MakeJob_DemoPattern" Id="{5c1d0e90-5dce-4289-b8a5-8f97c2323b70}">
      <Declaration><![CDATA[METHOD MakeJob_DemoPattern : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// 直線動作タスク追加
FOR i := 1 TO 5 DO
	fb_positioning_job.add_future(fbMoveToPositionTasks[i]);
END_FOR
fb_positioning_job.add_future(fbMoveToPositionTasks[1]);

fb_positioning_job.future_name := '<POSITIONING>';

// 回転動作タスク追加
FOR i := 1 TO  2 DO
	fb_rotation_job.add_future(fbMoveCTasks[i]);
END_FOR

fb_rotation_job.future_name := '<ROTATION>';

// 上下動作タスク追加
FOR i := 1 TO 9 DO
	fb_vertical_repeat_jobs.add_future(fbMoveZTasks[1]); //MAX_TASKが10までなので前後半配列に分けて登録
	fb_vertical_repeat_jobs.add_future(fbMoveZTasks[2]);
END_FOR

fb_vertical_repeat_jobs.add_future(fbMoveZTasks[1]);

fb_vertical_repeat_jobs.future_name := '<ELEVATION>';

// 傾きA動作タスク追加
FOR i := 1 TO 10 DO
	fb_tilt_A_repeat_jobs.add_future(fbMoveATasks[1]);
	IF i = 10 THEN
		fb_tilt_A_repeat_jobs.add_future(fbMoveATasks[3]);
	ELSE
		fb_tilt_A_repeat_jobs.add_future(fbMoveATasks[2]);
	END_IF
END_FOR

fb_tilt_A_repeat_jobs.future_name := '<TILT F/B>';

// 傾きB動作タスク追加
FOR i := 1 TO 10 DO
	fb_tilt_B_repeat_jobs.add_future(fbMoveBTasks[1]);
	IF i = 10 THEN
		fb_tilt_B_repeat_jobs.add_future(fbMoveBTasks[3]);
	ELSE
		fb_tilt_B_repeat_jobs.add_future(fbMoveBTasks[2]);
	END_IF
END_FOR

fb_tilt_B_repeat_jobs.future_name := '<TILT L/R>';

// AB両方の傾き
FOR i := 1 TO 4 DO
	fb_tilt_AB_cycle_jobs.add_future(fbMoveAB_ATasks[1]);
	fb_tilt_AB_cycle_jobs.add_future(fbMoveAB_BTasks[1]);
	fb_tilt_AB_cycle_jobs.add_future(fbMoveAB_ATasks[2]);
	fb_tilt_AB_cycle_jobs.add_future(fbMoveAB_BTasks[2]);
END_FOR
fb_tilt_AB_cycle_jobs.add_future(fbMoveAB_ATasks[3]);
fb_tilt_AB_cycle_jobs.add_future(fbMoveAB_BTasks[3]);

fb_tilt_AB_cycle_jobs.future_name := '<TILT F/B/L/R>';

MakeJob_DemoPattern := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Action Name="MakeJob_Home" Id="{af803ab2-5260-4545-8bd1-989c6b0d6468}">
      <Implementation>
        <ST><![CDATA[IF fb_home_job.init() THEN
	fbHomeATasks.set_target_position(0);
	fbHomeATasks.set_dynamics(Vel, Acc, Dcc, Jerk);
	{attribute 'TcEncoding' := 'UTF-8'}
	fbHomeATasks.future_name := 'HOME-Tilt-A';
	fbHomeBTasks.set_target_position(0);
	fbHomeBTasks.set_dynamics(Vel, Acc, Dcc, Jerk);
	{attribute 'TcEncoding' := 'UTF-8'}
	fbHomeBTasks.future_name := 'HOME-Tilt-B';
	fbHomeZTasks.set_target_position(INIT_HEIGHT);
	fbHomeZTasks.set_dynamics(Vel, Acc, Dcc, Jerk);
	{attribute 'TcEncoding' := 'UTF-8'}
	fbHomeZTasks.future_name := 'HOME-Z';
	fbHomeCTasks.set_target_position(0);
	fbHomeCTasks.set_dynamics(Coord_Mcs_C1,Ang_Vel,Ang_Acc,Ang_Dcc,Ang_Jerk);
	{attribute 'TcEncoding' := 'UTF-8'}
	fbHomeCTasks.future_name := 'HOME-C';
	//fbHomeToPositionTasks.set_target_position(240,120,0);
	//fbHomeToPositionTasks.set_dynamics(Vel, Acc, Dcc, Jerk);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="MakeTasks" Id="{c18f96ce-3a73-48c3-89c6-3367fd26b018}">
      <Declaration><![CDATA[METHOD MakeTasks : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// 直線動作タスク追加
fbMoveToPositionTasks[1].set_target_position(240,120,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[1].future_name := 'MOVE B2';
fbMoveToPositionTasks[2].set_target_position(80,80,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[2].future_name := 'MOVE A3';
fbMoveToPositionTasks[3].set_target_position(80,160,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[3].future_name := 'MOVE A1';
fbMoveToPositionTasks[4].set_target_position(400,160,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[4].future_name := 'MOVE C1';
fbMoveToPositionTasks[5].set_target_position(400,80,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[5].future_name := 'MOVE C3';
fbMoveToPositionTasks[6].set_target_position(80,120,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[6].future_name := 'MOVE A2';
fbMoveToPositionTasks[7].set_target_position(240,80,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[7].future_name := 'MOVE B3';
fbMoveToPositionTasks[8].set_target_position(240,160,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[8].future_name := 'MOVE B1';
fbMoveToPositionTasks[9].set_target_position(400,120,0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveToPositionTasks[9].future_name := 'MOVE C2';
FOR i := 1 TO 9 DO
	fbMoveToPositionTasks[i].set_dynamics(Vel, Acc, Dcc, Jerk);
END_FOR

// 回転動作タスク追加
fbMoveCTasks[1].set_target_position(0.0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveCTasks[1].future_name := 'ROLL 0.0 deg';
fbMoveCTasks[2].set_target_position(360.0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveCTasks[2].future_name := 'ROLL 360.0 deg';
fbMoveCTasks[3].set_target_position(90.0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveCTasks[3].future_name := 'ROLL 90.0 deg';
fbMoveCTasks[4].set_target_position(180.0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveCTasks[4].future_name := 'ROLL 180.0 deg';
fbMoveCTasks[5].set_target_position(270.0);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveCTasks[5].future_name := 'ROLL 270.0 deg';
FOR i := 1 TO  5 DO
	fbMoveCTasks[i].set_dynamics(Coord_Mcs_C1,Ang_Vel,Ang_Acc,Ang_Dcc,Ang_Jerk);
END_FOR

// 上下動作タスク追加
fbMoveZTasks[1].set_target_position(Z_High);
fbMoveZTasks[1].set_dynamics(Vel, Acc, Dcc, Jerk);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveZTasks[1].future_name := 'ELEV. UP';
fbMoveZTasks[2].set_target_position(Z_Low);
fbMoveZTasks[2].set_dynamics(Vel, Acc, Dcc, Jerk);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveZTasks[2].future_name := 'ELEV. DOWN';

// 傾きA動作タスク追加
fbMoveATasks[1].set_target_position(Tilt);
fbMoveATasks[1].set_dynamics(Vel, Acc, Dcc, Jerk);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveATasks[1].future_name := 'Tilt forwards';
fbMoveATasks[2].set_target_position(-Tilt);
fbMoveATasks[2].set_dynamics(Vel, Acc, Dcc, Jerk);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveATasks[2].future_name := 'Tilt backwards';
fbMoveATasks[3].set_target_position(0);
fbMoveATasks[3].set_dynamics(Vel, Acc, Dcc, Jerk);
{attribute 'TcEncoding' := 'UTF-8'}
fbMoveATasks[3].future_name := 'F/B tilt holizontal';

// 傾きB動作タスク追加
fbMoveBTasks[1].set_target_position(Tilt);
fbMoveBTasks[1].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveBTasks[1].future_name := 'Tilt right';
fbMoveBTasks[2].set_target_position(0 - Tilt);
fbMoveBTasks[2].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveBTasks[2].future_name := 'Tilt left';
fbMoveBTasks[3].set_target_position(0);
fbMoveBTasks[3].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveBTasks[3].future_name := 'L/R tilt horizontal';


// AB両方の傾き
fbMoveAB_ATasks[1].set_target_position(Rotaion_Ang);
fbMoveAB_ATasks[1].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveAB_ATasks[1].future_name := 'Tilt backwards';
fbMoveAB_ATasks[2].set_target_position(-Rotaion_Ang);
fbMoveAB_ATasks[2].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveAB_ATasks[2].future_name := 'Tilt forwards';
fbMoveAB_ATasks[3].set_target_position(0);
fbMoveAB_ATasks[3].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveAB_ATasks[3].future_name := 'Tilt F/B Holizontal';
fbMoveAB_BTasks[1].set_target_position(Rotaion_Ang);
fbMoveAB_BTasks[1].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveAB_BTasks[1].future_name := 'Tilt right';
fbMoveAB_BTasks[2].set_target_position(-Rotaion_Ang);
fbMoveAB_BTasks[2].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveAB_BTasks[2].future_name := 'Tilt left';
fbMoveAB_BTasks[3].set_target_position(0);
fbMoveAB_BTasks[3].set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveAB_BTasks[3].future_name := 'Tilt L/R Holizontal';

// 初期状態高さへ戻る
fbMoveZTask_init.set_target_position(INIT_HEIGHT);
fbMoveZTask_init.set_dynamics(Vel, Acc, Dcc, Jerk);
fbMoveZTask_init.future_name := 'Height initial position.';
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="9044" Count="28" />
      <LineId Id="9568" Count="2" />
      <LineId Id="9073" Count="2" />
      <LineId Id="9418" Count="0" />
      <LineId Id="9076" Count="31" />
      <LineId Id="9420" Count="1" />
      <LineId Id="9108" Count="308" />
      <LineId Id="3507" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_Lamp_Ctrl">
      <LineId Id="26" Count="1" />
      <LineId Id="1" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.MakeJob_DemoPattern">
      <LineId Id="116" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="218" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="220" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="144" Count="5" />
      <LineId Id="221" Count="1" />
      <LineId Id="150" Count="1" />
      <LineId Id="159" Count="7" />
      <LineId Id="224" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="176" Count="7" />
      <LineId Id="226" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="200" Count="7" />
      <LineId Id="227" Count="1" />
      <LineId Id="212" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.MakeJob_Home">
      <LineId Id="5" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.MakeTasks">
      <LineId Id="174" Count="2" />
      <LineId Id="269" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="181" Count="5" />
      <LineId Id="254" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="188" Count="6" />
      <LineId Id="264" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="195" Count="1" />
      <LineId Id="265" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="197" Count="3" />
      <LineId Id="266" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="205" Count="3" />
      <LineId Id="284" Count="0" />
      <LineId Id="209" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="213" Count="3" />
      <LineId Id="288" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="221" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="223" Count="1" />
      <LineId Id="293" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="291" Count="0" />
      <LineId Id="227" Count="3" />
      <LineId Id="112" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>